Rails -v 5.1.4

1)
  #Terminal
    - rails new  <file-name> --api -d postgresql

2)
  # ./gemfile

    Add

      - gem 'devise'

      - gem 'jwt'
        - Allows us to use JsonWebTokens

      - gem 'responders'
        - Gives us the ability to add a respond_to call into our
        ApplicationController, so that every controller which inherits from it
        knows to respond using JSON, which means we don't have to worry about
        rendering anything else.

    Uncomment and add to

      - gem 'rack-cors', :require => 'rack/cors'
        - Used to ignore browsers cors

3)
  # Terminal
    - rails g devise:install

4)
  # Terminal
    - rails g devise User first_name:string last_name:string
    - rake db:migrate
      - Create a new user model with all the devise properties. Also with first name
      and last name properties.


5)
  # Terminal
    - createdb rails_auth_development

6)
  # Create controller registratons_controller.rb containing:

    class RegistrationsController < ApplicationController
      respond_to :json

      def create
        if(User.exists?(email: params[:email]))
          render json: {respons: "user exists"}
        else
          user = User.create({first_name: params[:first_name], last_name: params[:last_name], email: params[:email], password: params[:password]})
          render json: token_hash(user)
        end
      end

    end

7)
  # ./config/routes.rb
    Add
      - resources :registrations

8)
  # Add to ApplicationController

  protected

  def token_hash(user)
    if(user && user.id)
      return {
        auth_token: JsonWebToken.encode(user_id: user.id),
        user: {id: user.id, first_name: user.first_name, last_name: user.last_name, email: user.email, admin: false}
      }
    else
      return nil
    end
  end

9)
  # ./lib
    Create file json_web_token.rb containing:

    class JsonWebToken
      def self.encode(payload)
        JWT.encode(payload, Rails.application.secrets.secret_key_base, "HS256")
      end

      def self.decode(token)
        return HashWithIndifferentAccess.new(
          JWT.decode(token, Rails.application.secrets.secret_key_base, true, {algorithm: "HS256"})[0]
        )
        rescue => error
          puts error
        end
      end

      "HS256" - the algorithm used to encode JWT. There are a few options but at least one must be given.

10)
  # ./config/initializers
  Create file jwt.rb containing:
    require 'json_web_token'


----- At this point you can post to the route /registrations to create a user
----- The object should include (parameter order does not matter but email must be unique)
          {
            "first_name": "f-name",
            "last_name": "l-name",
            "email": "xxx@ex.com",
            "password": "123456789"
          }

----- The route is /registrations as the routes file is in the following state:
  Rails.application.routes.draw do
    resources :registrations
  end

----- To have the route be /users the state would be:
  Rails.application.routes.draw do
    devise_for :users, :controllers => {registrations: 'registrations'}
  end

11)
  # ./config.rb
  replace the entire file contents with and if the server is running restart before
  testing

    require_relative 'config/environment'

    run Rails.application

    require 'rack/cors'
    use Rack::Cors do

      # allow all origins in development
      allow do
        origins '*'
        resource '*',
            :headers => :any,
            :methods => [:get, :post, :delete, :put, :options]
      end
    end

----- The last step uses the gem rack-cors from step 2. I think it requires a
      server restart to notice any changes.

12)
  # Make sessions controller containing:

  class SessionsController < ApplicationController
    respond_to :json

    def create
      user = User.find_for_database_authentication(email: params[:email])
      if user.valid_password?(params[:password])
        render json: token_hash(user)
      else
        render json: {errors: ['Invalid Username/Password']}, status: :unauthorized
      end
    end

  end

13)
  # ./config/routes.rb
  Add
    - resources :sessions

----- After step 13 a JWT token can be acquired by posting to the route /sessions
----- The object sent should be:
      {
        "email": "xxx@ex.com",
        "password": "123456789"
      }

14)
  # Add to application controller below the key word protected

  def authenticate_request!
    unless user_id_in_token?
      render json: { errors: ['Not Authenticated'] }, status: :unauthorized
      return
    end
    @current_user = User.find(auth_token[:user_id])
  rescue JWT::VerificationError, JWT::DecodeError
    render json: { errors: ['Not Authenticated'] }, status: :unauthorized
  end

  private
  def http_token
      @http_token ||= if request.headers['Authorization'].present?
        request.headers['Authorization'].split(' ').last
      end
  end

  def auth_token
    @auth_token ||= JsonWebToken.decode(http_token)
  end

  def user_id_in_token?
    http_token && auth_token && auth_token[:user_id].to_i
  end

----- At this point authentications should be in state as it was on the 25/09
----- The following is not required and is only to test auth works

15)
  # Create a controller auth_controller.rb containing:

  class AuthController < ApplicationController
    before_action :authenticate_request!

      def index
       render json: {return: "valid user has access"}
      end

  end

16)
  # ./config/routes.rb
  Add
    - resources :auth

----- Once done use insomina to get at route /auth
----- In the header tab under the url add a new header
        first box (My-Header)
          Authorization
        second box (value)
          Bearer <insert-auth-token here>
----- If the token is correct the object {return: "valid user has access"} is returned
      else { "errors": ["Not Authenticated"]} is returned
